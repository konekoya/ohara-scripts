#!/usr/bin/env node

const cp = require("child_process");
const chalk = require("chalk");
const config = require("./config");
require("dotenv").config({ path: config.envPath });

const containerName = process.env.CONFIGURATOR_NAME;
const userName = process.env.USER_NAME;
const masterIp = process.env.K8S_MASTER;
const slaveIp = process.env.K8S_SLAVE;

console.log(
  chalk.blue(`üìÉ Clean up docker containers on ${masterIp} and ${slaveIp}`)
);

try {
  console.log(chalk.blue(`First up, delete all pods on ${slaveIp}`));

  cp.execSync(
    `ssh ${userName}@${masterIp} kubectl delete pods --all --grace-period=0 --force`,
    { stdio: "inherit" }
  );

  cp.execSync(`ssh ${userName}@${masterIp} kubectl get pods`, {
    stdio: "inherit"
  });
} catch (error) {
  console.log(error);
  console.log(chalk.red(`Oops, failed to delete pods...`));
}

console.log(chalk.blue(`Next up, let's delete Configurator on ${masterIp}`));

try {
  const hasContainer = cp
    .execSync(
      `ssh ${userName}@${masterIp} docker ps --filter "name=${containerName}" -q`
    )
    .toString();

  if (hasContainer) {
    cp.execSync(`ssh ${userName}@${masterIp} docker rm -f ${containerName}`, {
      stdio: "inherit"
    });
    console.log(
      chalk.green(
        `üëç Successfully deleted container: ${chalk.bold(containerName)}`
      )
    );
    return;
  }

  console.log();
  console.log(
    chalk.yellow(
      `Could not found a container named ${chalk.bold(containerName)}`
    )
  );

  console.log(
    chalk.blue(
      "Here are some more info of the currently running configurator container:"
    )
  );
  cp.execSync(`ssh ${userName}@${masterIp} docker ps -a | grep configurator`, {
    stdio: "inherit"
  });
} catch (error) {
  console.log(error.message);
  console.log(
    chalk.red(`Oops, failed to remove container ${chalk.bold(containerName)}`)
  );
}

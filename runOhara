#!/usr/bin/env node

const cp = require("child_process");
const chalk = require("chalk");
const config = require("./config");
const { sleep } = require("./utils.js");
require("dotenv").config({ path: config.envPath });

const containerName = process.env.CONFIGURATOR_NAME;
const configuratorImage = process.env.CONFIGURATOR_IMAGE_NAME;
const userName = process.env.USER_NAME;
const masterIp = process.env.K8S_MASTER;
const slaveIp = process.env.K8S_SLAVE;

const MODES = {
  FAKE: "FAKE",
  K8S: "K8S",
  DOCKER: "DOCKER"
};

console.log(
  chalk.blue(`üìÉStart a configurator named ${containerName} on ${masterIp}`)
);
console.log();

function parseArgs() {
  const option = process.argv.slice(2);
  // Default mode
  if (option.length === 0) {
    return MODES.K8S;
  }

  // For now, users can only pass a single option
  if (option.length > 1) {
    throw new Error(
      `You can only pass one CLI option to this program! Instead, receiving ${option}`
    );
  }

  if (!option[0].startsWith("--")) {
    throw new Error(`Unrecognized CLI option of ${option}`);
  }

  return option[0].split("=")[1];
}

function run(options) {
  cp.execSync(`ssh ${userName}@${masterIp} ${options}`, { stdio: "inherit" });
}

try {
  const currentMode = parseArgs().toUpperCase();

  if (currentMode == MODES.K8S) {
    run(
      `docker run -d --name ${containerName} --rm -p 12345:12345 --add-host ohara-dev-102:${masterIp} --add-host ohara-dev-103:${slaveIp} ${configuratorImage} --port 12345 --hostname ${masterIp} --k8s http://${masterIp}:8080/api/v1`
    );
  } else if (currentMode == MODES.DOCKER) {
    run(
      `docker run -d --name ${containerName} --rm -p 12345:12345 --add-host ohara-dev-102:${masterIp} ${configuratorImage} --port 12345 --hostname ${masterIp}`
    );
  } else {
    run(
      `docker run -d --name ${containerName} --rm -p 12345:12345 ${configuratorImage} --port 12345 --fake true`
    );
  }

  console.log(
    chalk.green(
      `üëç Successfully created the configurator: ${chalk.bold(
        containerName
      )} in ${currentMode} mode`
    )
  );
} catch (error) {
  console.log(error);
  console.log(chalk.red(`Oops, we cannot start a new configurator`));
}

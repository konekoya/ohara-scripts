#!/usr/bin/env node
const cp = require('child_process');

const { logger } = require('./utils');
const config = require('./config');
require('dotenv').config({ path: config.envPath });

const oharaPath = process.env.OHARA_HOME;

logger.info(`ðŸ“ƒ Updating local ohara branch at ${oharaPath}`);
logger.log(oharaPath);
try {
  process.chdir(oharaPath);

  const currentBranchName = cp
    .execSync('git rev-parse --abbrev-ref HEAD')
    .toString()
    .trim();

  logger.info(`Your local ohara branch is pointing to ${currentBranchName}`);

  if (currentBranchName === 'master') {
    return cp.execSync(`git pull`, { stdio: 'inherit' });
  }

  // Not on master
  try {
    // If a working tree is dirty, we will stash the changes and do the rebase
    // then stash apply them back.
    const hasUncommittedFiles = cp.execSync('git status -s').toString().trim();

    if (hasUncommittedFiles) {
      logger.warn(`The working tree is dirty, stashing the changes`);
      cp.execSync('git stash -u', { stdio: 'inherit' });
    }

    cp.execSync('git checkout master', { stdio: 'inherit' });
    cp.execSync('git pull', { stdio: 'inherit' });
    cp.execSync('git checkout -');
    logger.success(`Rebasing feature branch of ${currentBranchName}`);
    cp.execSync('git rebase master', { stdio: 'inherit' });

    if (hasUncommittedFiles) {
      logger.info(
        `Applying the changes that were temporarily in the previous steps`
      );
      cp.execSync('git stash apply', { stdio: 'inherit' });
    }
  } catch (error) {
    logger.error('Oops, failed to update feature branch');
  }
} catch (error) {
  logger.error('Oops, cannot update the branch');
  console.log(error);
}

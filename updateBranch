#!/usr/bin/env node
const config = require("./config");
const chalk = require("chalk");
const cp = require("child_process");
require("dotenv").config({ path: config.envPath });

const oharaPath = process.env.OHARA_HOME;

console.log(chalk.blue(`ðŸ“ƒ Updating local ohara branch at ${oharaPath}`));
console.log(oharaPath);
try {
  process.chdir(oharaPath);

  const currentBranchName = cp
    .execSync("git rev-parse --abbrev-ref HEAD")
    .toString()
    .trim();

  console.log(
    chalk.blue(`Your local ohara branch is pointing to ${currentBranchName}`)
  );

  if (currentBranchName === "master") {
    return cp.execSync(`git pull`, { stdio: "inherit" });
  }

  // Not on master
  try {
    // If a working tree is dirty, we will stash the changes and do the rebase
    // then stash apply them back.
    const hasUncommittedFiles = cp.execSync("git status -s").toString().trim();

    if (hasUncommittedFiles) {
      console.log(
        chalk.blue(`The working tree is dirty, stashing the changes`)
      );
      cp.execSync("git stash -u", { stdio: "inherit" });
    }

    cp.execSync("git checkout master", { stdio: "inherit" });
    cp.execSync("git pull", { stdio: "inherit" });
    cp.execSync("git checkout -");
    console.log(chalk.green(`Rebasing feature branch of ${currentBranchName}`));
    cp.execSync("git rebase master", { stdio: "inherit" });

    if (hasUncommittedFiles) {
      console.log(
        chalk.blue(
          `Applying the changes that were temporarily in the previous steps`
        )
      );
      cp.execSync("git stash apply", { stdio: "inherit" });
    }
  } catch (error) {
    console.log(chalk.red("Oops, failed to update feature branch"));
  }
} catch (error) {
  console.log(chalk.red("Oops, cannot update the branch"));
  console.log(error);
}
